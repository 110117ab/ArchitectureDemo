apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.tufei.architecturedemo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.Test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:$rootProject.ext.supportLibraryVersion"
    implementation "com.android.support.constraint:constraint-layout:$rootProject.ext.constraintLayoutVersion"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
//    androidTestImplementation "com.android.support.Test:runner:$rootProject.ext.runnerVersion"
//    androidTestImplementation "com.android.support.Test.espresso:espresso-core:$rootProject.ext.espressoVersion"
    //dagger2
    compile "com.google.dagger:dagger:$rootProject.ext.daggerVersion"
    provided 'org.glassfish:javax.annotation:10.0-b28'
    annotationProcessor "com.google.dagger:dagger-compiler:$rootProject.ext.daggerVersion"
    compile "com.google.dagger:dagger-android:$rootProject.ext.daggerVersion"
    compile "com.google.dagger:dagger-android-support:$rootProject.ext.daggerVersion"
    // if you use the support libraries
    annotationProcessor "com.google.dagger:dagger-android-processor:$rootProject.ext.daggerVersion"
    //RxJava
    compile "io.reactivex.rxjava2:rxandroid:$rootProject.ext.rxandroidVersion"
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    compile "io.reactivex.rxjava2:rxjava:$rootProject.ext.rxjavaVersion"
    //黄油刀
    compile "com.jakewharton:butterknife:$rootProject.ext.butterknifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.ext.butterknifeVersion"
    //retrofit
    compile "com.squareup.retrofit2:retrofit:$rootProject.ext.retrofitVersion"
    compile "com.squareup.retrofit2:retrofit-converters:$rootProject.ext.retrofitVersion"
    compile "com.squareup.retrofit2:converter-gson:$rootProject.ext.retrofitVersion"
    compile "com.squareup.retrofit2:adapter-rxjava2:$rootProject.ext.retrofitVersion"
    //compile 'com.squareup.retrofit2:adapter-rxjava:2.3.0'
    //compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    //gson
    compile "com.google.code.gson:gson:$rootProject.ext.gsonVersion"
    //okhttp(Retrofit默认引用okhttp，没必要再引用)
    //    compile 'com.squareup.okhttp3:okhttp:3.8.1'
    compile "com.squareup.okhttp3:logging-interceptor:$rootProject.ext.logInterceptorVersion"
    androidTestCompile 'junit:junit:4.12'
}
